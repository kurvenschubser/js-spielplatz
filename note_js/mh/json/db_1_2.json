{
  "f_eintrag": [
    {
      "id": 83,
      "titel": "Add Spalte",
      "text": "alter table dbo.auktionen\r\n\tadd reederei int not null default((0))",
      "sub_sub": 40,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 98,
      "titel": "All User Desktop",
      "text": "C:\\Users\\Public\\Desktop",
      "sub_sub": 54,
      "sub": 13,
      "lang": 13,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 95,
      "titel": "alter colum",
      "text": "ALTER TABLE bp_rollen\r\n\t\t\tALTER COLUMN bez_w VARCHAR(50) NOT NULL",
      "sub_sub": 51,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 122,
      "titel": "alter CONSTRAINT",
      "text": "Alter table lea_fall_debitor\r\n\tdrop CONSTRAINT [pk_fall_debitor]\r\n\r\nGO\r\n\r\nALTER TABLE lea_fall_debitor ADD  CONSTRAINT [pk_fall_debitor] PRIMARY KEY CLUSTERED \r\n([fall] ASC,[fh] ASC)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF,IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]",
      "sub_sub": 75,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 10,
      "titel": "Append / Write / Read File",
      "text": "System.IO.File.WriteAllText(path, text);\r\nFile.AppendAllText(path, appendText, Encoding.UTF8);\r\nstring readText = File.ReadAllText(path);",
      "sub_sub": 7,
      "sub": 1,
      "lang": 1,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 93,
      "titel": "Application Startup Pfad",
      "text": "path = string.Format(@\"{0}time.txt\",AppDomain.CurrentDomain.BaseDirectory);",
      "sub_sub": 49,
      "sub": 17,
      "lang": 11,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 59,
      "titel": "Backup",
      "text": "//require sql server 2008 \r\n//Microsoft.SqlServer.ConnectionInfo.dll / Microsoft.SqlServer.Management.Sdk.Sfc.dll / Microsoft.SqlServer.Smo.dll / Microsoft.SqlServer.SmoExtended.dll\r\n//aus Ordner C:\\Program Files (x86)\\Microsoft SQL Server\\100\\SDK\\Assemblies\\\r\nMicrosoft.SqlServer.Management.Common.ServerConnection con = \r\n       new Microsoft.SqlServer.Management.Common.ServerConnection(SqlConObj);                \r\nMicrosoft.SqlServer.Management.Smo.BackupDeviceItem item = \r\n\tnew Microsoft.SqlServer.Management.Smo.BackupDeviceItem(@\"c:\\testSql\\test.bak\", Microsoft.SqlServer.Management.Smo.DeviceType.File);\r\nMicrosoft.SqlServer.Management.Smo.Backup backup = new Microsoft.SqlServer.Management.Smo.Backup\r\n {\r\n\tDatabase = database,\r\n \tInitialize = true\r\n};\r\nbackup.BackupSetName = \"testName\";\r\nbackup.Devices.Add(item);\r\nMicrosoft.SqlServer.Management.Smo.Server server = new Microsoft.SqlServer.Management.Smo.Server(con);\r\ntry\r\n{\r\n\tbackup.SqlBackup(server);\r\n}\r\ncatch (Exception ex)\r\n{\r\n\tthrow ex;\r\n}\r\n\rRESTORE DATABASE 'DatabaseName' FROM DISK = 'Pfad zu Backup-Datei' WITH REPLACE, RECOVERY\r\n\r\nRESTORE DATABASE [AdventureWorksNew] \r\n\tFROM  DISK = N'\\\\nas\\Backup\\L40\\SQL2005\\AdventureWorks_backup_200702120215.bak' \r\n\tWITH  FILE = 1,  \r\n\tMOVE N'AdventureWorks_Data' TO N'C:\\Data\\MSSQL.1\\MSSQL\\Data\\AdventureWorksNew_Data.mdf',  \r\n\tMOVE N'AdventureWorks_Log' TO N'C:\\Data\\MSSQL.1\\MSSQL\\Data\\AdventureWorksNew_Log.ldf',  \r\n\tNOUNLOAD,  \r\n\tSTATS = 10\r\n\r\nRESTORE DATABASE { database_name | @database_name_var } \r\n [ FROM <backup_device> [ ,...n ] ]\r\n [ WITH \r\n   {\r\n    [ RECOVERY | NORECOVERY | STANDBY = \r\n        {standby_file_name | @standby_file_name_var } \r\n       ]\r\n   | ,  <general_WITH_options> [ ,...n ]\r\n   | , <replication_WITH_option>\r\n   | , <change_data_capture_WITH_option>\r\n   | , <FILESTREAM_WITH_option>\r\n   | , <service_broker_WITH options> \r\n   | , <point_in_time_WITH_options—RESTORE_DATABASE> \r\n   } [ ,...n ]\r\n ]\r\n[;]",
      "sub_sub": 28,
      "sub": 2,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 123,
      "titel": "Case",
      "text": "SELECT st_id, case when inaktiv = 0 then stname else stname + ' (inaktiv)' end as stname FROM dbo.standort",
      "sub_sub": 76,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 46,
      "titel": "Checked Listview",
      "text": "<UserControl.Resources>\r\n        <ControlTemplate x:Key=\"ItemTemplate\" TargetType=\"ListViewItem\">\r\n            <Border BorderThickness=\"{TemplateBinding Border.BorderThickness}\" Padding=\"{TemplateBinding Control.Padding}\" BorderBrush=\"{TemplateBinding Border.BorderBrush}\" Background=\"{TemplateBinding Panel.Background}\" SnapsToDevicePixels=\"True\">\r\n                <ContentPresenter Content=\"{TemplateBinding ContentControl.Content}\" ContentTemplate=\"{TemplateBinding ContentControl.ContentTemplate}\" HorizontalAlignment=\"{TemplateBinding Control.HorizontalContentAlignment}\" VerticalAlignment=\"{TemplateBinding Control.VerticalContentAlignment}\" SnapsToDevicePixels=\"{TemplateBinding UIElement.SnapsToDevicePixels}\" />\r\n            </Border>\r\n        </ControlTemplate>\r\n        <Style TargetType=\"ListViewItem\">\r\n            <Setter Property=\"Template\" Value=\"{StaticResource ItemTemplate}\" />\r\n        </Style>\r\n        <DataTemplate x:Key=\"ItemDataTemplate\">\r\n            <CheckBox x:Name=\"checkbox\" Content=\"{Binding}\" IsChecked=\"{Binding IsSelected, Mode=TwoWay}\" />            \r\n        </DataTemplate>\r\n    </UserControl.Resources>\r\n    <ListView x:Name=\"checkedListView\" SelectionMode=\"Multiple\" ItemsSource=\"{Binding}\" ItemTemplate=\"{StaticResource ItemDataTemplate}\" />\r\n</UserControl>\r\n\rDem zu Verwendeten Objekt das Attribut 'IsSelected' zufügen\r\nCode Behind Datei:\r\nG:\\VS2010\\FIRMA_GISS\\svn\\ede_vs2010\\JuHi_SRC\\CSharp\\LizenzGenerator\\LizenzGenerator\\Ctrl\\CheckedListErweiterung.xaml.cs",
      "sub_sub": 23,
      "sub": 7,
      "lang": 11,
      "sort": 1,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 102,
      "titel": "ComboBox TextChanged",
      "text": " <ComboBox TextBoxBase.TextChanged=\"cmbOrt_TextChanged\" ",
      "sub_sub": 58,
      "sub": 7,
      "lang": 11,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 86,
      "titel": "constraint add / drop",
      "text": "alter table ih_faelle_u_komplex\r\n     add constraint fk_fuk_fp foreign key (fplan) references ih_foerdplan (fp_id)\r\n     \r\n alter table ih_faelle_u_komplex\r\n     add constraint pk_fuk primary key (fplan)\r\n\r\n alter table ih_faelle_u_komplex\r\n     drop constraint pk__ih_faelle_u_komp",
      "sub_sub": 42,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 6,
      "titel": "ContextMenu",
      "text": "<!-- Icon geht nur mit Projekt Resource -->\r\n<Grid Margin=\"10,41,10,10\" Grid.Row=\"1\" Grid.Column=\"0\" HorizontalAlignment=\"Stretch\" VerticalAlignment=\"Stretch\" >\r\n\t<Grid.ContextMenu>\r\n       \t<ContextMenu>\r\n             \t\t<MenuItem Icon=\"Images/f_neu.gif\" Header=\"test\" />\r\n             </ContextMenu>\r\n\t</Grid.ContextMenu>          \r\n </Grid>\rContextMenu cmenu = new ContextMenu();                   \r\nMenuItem item = new MenuItem();\r\nitem.Header = \"Syntax\";                 \r\nImage img = new Image();\r\n//Icon aus externer Resource\r\nimg.Source = BitmapFrame.Create(new Uri(\"pack://application:,,,/MH.WPF.Ctrl;component/Images/csharp.jpg\", UriKind.RelativeOrAbsolute));\r\nitem.Icon = img;\r\nitem.PreviewMouseDown += new MouseButtonEventHandler(Syntax_PreviewMouseDown);\r\nMenuItem subItem = null;\r\nforeach (Syntax syn in Controler.GetControler.GetListSyntax)\r\n{\r\n\tsubItem = new MenuItem();\r\n       subItem.Tag = syn;\r\n      \tsubItem.IsCheckable = true;\r\n       subItem.Header = syn.sprache;\r\n       subItem.Click += new RoutedEventHandler(SyntaxItem_Click);\r\n        item.Items.Add(subItem);\r\n}\r\n\r\ncmenu.Items.Add(item); ",
      "sub_sub": 5,
      "sub": 7,
      "lang": 11,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 118,
      "titel": "Convert Date",
      "text": "isnull(convert(char(10), r.angelegt, 104), 'kein Datum')",
      "sub_sub": 71,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 37,
      "titel": "Convert Image To 64bit",
      "text": "using System.Drawing;\r\nusing System.Drawing.Imaging;\r\nusing System.IO;\r// Loading the original icon\r\nIcon icon = new Icon(\"originalIcon.ico\");\r\n// Converting it to bitmap, to allow image manipulation\r\nBitmap bitmap = icon.ToBitmap();\r\n// This rectangle has no meaning for us, it just has to encompass the entire image\r\nRectangle r = new Rectangle(0, 0, bitmap.Width, bitmap.Height);\r\n// Using the clone method to convert the icon\r\nBitmap bmp = bitmap.Clone(r, PixelFormat.Format16bppArgb1555);\r\n// And we claim back the icon (to retain the ico format) and save it.\r\nicon = Icon.FromHandle(bmp.GetHicon());\r\nusing (FileStream stream = new FileStream(\"convertedIcon.ico\", FileMode.Create))\r\n{\r\n\ticon.Save(stream);\r\n}",
      "sub_sub": 21,
      "sub": 1,
      "lang": 1,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 58,
      "titel": "Create",
      "text": "--Datenbank erstellen\r\nCREATE DATABASE &#x3C;DatenbankName>\r\nON \r\n( NAME = &#x3C;DatenbankName>_dat,\r\n    FILENAME = 'C:\\Program Files\\Microsoft SQL Server\\MSSQL11.MSSQLSERVER\\MSSQL\\DATA\\saledat.mdf',\r\n    SIZE = 10,\r\n    MAXSIZE = 50,\r\n    FILEGROWTH = 5 )\r\nLOG ON\r\n( NAME = &#x3C;DatenbankName>_log,\r\n    FILENAME = 'C:\\Program Files\\Microsoft SQL Server\\MSSQL11.MSSQLSERVER\\MSSQL\\DATA\\salelog.ldf',\r\n    SIZE = 5MB,\r\n    MAXSIZE = 25MB,\r\n    FILEGROWTH = 5MB );\r\n\r\n--Tabelle erstellen\r\nCREATE TABLE &#x3C;TabellenName>(\r\n\t[id] [int] IDENTITY(1,1) NOT NULL\r\nPRIMARY KEY CLUSTERED \r\n(\r\n\t[id] ASC\r\n)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, \t\r\n\r\nALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n) ON [PRIMARY]\r\n\r\n--View erstellen\r\nCREATE VIEW &#x3C;ViewName>\r\nAS\r\n\t-- Select Anweisung\r\n\r\n--Prozedur erstellen\r\ncreate procedure &#x3C;ProzedruName>\r\nas\r\nbegin\r\n\t-- declare @cmd nvarchar(200)\r\n\t-- Prozedur Anweisung\r\nend",
      "sub_sub": 27,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 105,
      "titel": "Create DLL",
      "text": "     public class AdressenListe : List<Adresse>\r\n     {\r\n        public const string DatenbankName = \"Datenbank\";\r\n        public const string DatenbankFileName = DatenbankName + \".dll\";\r\n        public const string AddressenLoader = \"AddressenLoader\";\r\n        public void Save()\r\n        {\r\n          // Zuerst einmal eine Kompiliereinheit erstellen ...\r\n          System.CodeDom.CodeCompileUnit unitDatabase = new System.CodeDom.CodeCompileUnit();\r\n          // Namespace ist gut und wichtig (keine Klasse ohne Namespace im .Net Framework!) ...\r\n          System.CodeDom.CodeNamespace ns = new System.CodeDom.CodeNamespace(DatenbankName);\r\n          unitDatabase.Namespaces.Add(ns);\r\n          // Nun die Klasse \"AddressenLoader\" erzeugen ...\r\n          System.CodeDom.CodeTypeDeclaration typeRawData = new System.CodeDom.CodeTypeDeclaration(AddressenLoader);\r\n          typeRawData.Attributes = System.CodeDom.MemberAttributes.Public;\r\n          ns.Types.Add(typeRawData);\r\n          // Der Konstruktor wird erstellt ...\r\n          System.CodeDom.CodeConstructor ctorAddressList = new System.CodeDom.CodeConstructor();\r\n          typeRawData.Members.Add(ctorAddressList);\r\n          ctorAddressList.Attributes = System.CodeDom.MemberAttributes.Public;\r\n          System.CodeDom.CodeParameterDeclarationExpression paramList = new System.CodeDom.CodeParameterDeclarationExpression(typeof(AdressenListe), \"list\");\r\n          ctorAddressList.Parameters.Add(paramList);\r\n          System.CodeDom.CodeVariableReferenceExpression refList = new System.CodeDom.CodeVariableReferenceExpression(paramList.Name);\r\n          // Exportiere nun alle Adressen ...\r\n          foreach (Adresse address in this)\r\n          {\r\n            System.CodeDom.CodeArrayCreateExpression newAddressFields = new System.CodeDom.CodeArrayCreateExpression(typeof(string[]));\r\n            foreach (string field in address.Daten)\r\n              newAddressFields.Initializers.Add(new System.CodeDom.CodePrimitiveExpression(field));\r\n            System.CodeDom.CodeObjectCreateExpression newAddress = new System.CodeDom.CodeObjectCreateExpression(typeof(Adresse));\r\n            newAddress.Parameters.Add(newAddressFields);\r\n            System.CodeDom.CodeMethodInvokeExpression refAdd = new System.CodeDom.CodeMethodInvokeExpression(refList, \"Add\");\r\n            refAdd.Parameters.Add(newAddress);\r\n            ctorAddressList.Statements.Add(refAdd);\r\n          }\r\n          // jetzt noch ein bißchen den Compiler und paar Optionen eingestellt ...\r\n          System.CodeDom.Compiler.CodeDomProvider provider = System.CodeDom.Compiler.CodeDomProvider.CreateProvider(\"cs\");\r\n          string sOutputFile = System.IO.Path.Combine(System.IO.Path.GetTempPath(), DatenbankFileName);\r\n          System.IO.FileInfo tempDatenbank = new System.IO.FileInfo(sOutputFile);\r\n          System.CodeDom.Compiler.CompilerParameters paramsAddress = new System.CodeDom.Compiler.CompilerParameters(\r\n            new string[] { \"mscorlib.dll\", \"System.dll\", this.GetType().Assembly.Location }, tempDatenbank.FullName, false);\r\n          paramsAddress.GenerateExecutable = false;\r\n          // fertig! also nix wie kompiliert ...\r\n          System.CodeDom.Compiler.CompilerResults results = provider.CompileAssemblyFromDom(paramsAddress, unitDatabase);\r\n          // ein bisschen Aufräumen kann nicht schaden ...\r\n          provider.Dispose();\r\n          // noch mal schnell nach möglichen Kompilierfehler geschaut ...\r\n          if (results.Errors.Count != 0)\r\n            throw new Exception(string.Concat(\"Daten konnten nicht gespeichert werden. Interner Kompilierfehler.\\r\\n\", \r\n              results.Errors[0].ToString()));\r\n          // Kompiliert wurde im Temp Verzeichnis, bevor die DLL dann ins Zielverzeichnis verschoben wird\r\n          // schauen ob die Größe nicht das Maximum überschreitet (siehe das notwendige Limit in\r\n          // der Load() Methode\r\n          tempDatenbank.Refresh();\r\n          if (tempDatenbank.Length > (long)int.MaxValue)\r\n            throw new Exception(\"Datenbank hat das Maximum (2GB) der Größe überschritten.\");\r\n          // nun ist alles ok, also die Datenbank.dll ins Zielverzeichnis verschieben\r\n          System.IO.FileInfo fileDatenbank = new System.IO.FileInfo(System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, DatenbankFileName));\r\n          if (fileDatenbank.Exists)\r\n            fileDatenbank.Delete();\r\n          tempDatenbank.MoveTo(fileDatenbank.FullName);\r\n        }\r\n        \r\n\t\tpublic void Load()\r\n        {\r\n          this.Clear();\r\n          // Das dynamische Laden einer .Net Framework DLL geht mit etwas weniger Aufwand als das Kompilieren\r\n          // jedoch kann man die DLL nicht direkt im Projekt als Verweis hinzufügen, da während der Laufzeit die DLL für\r\n          // Schreibzugriffe vom Windows gesperrt wird, fürs Speichern ist das dann nicht wünschenswert!\r\n          // Lösung: Lade einfach die DLL in einen Buffer und verwende diesen anstelle der Datei selbst\r\n          System.IO.FileInfo fileDatenbank = new System.IO.FileInfo(System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, DatenbankFileName));\r\n          if (fileDatenbank.Length > (long)int.MaxValue)\r\n            throw new Exception(\"Datenbank hat das Maximum (2GB) der Größe überschritten.\");\r\n          int size = (int)fileDatenbank.Length;\r\n          byte[] buffer = new byte[size];\r\n          System.IO.FileStream streamFileDatenbank = new System.IO.FileStream(fileDatenbank.FullName, System.IO.FileMode.Open, System.IO.FileAccess.Read);\r\n          streamFileDatenbank.Read(buffer, 0, size);\r\n          streamFileDatenbank.Dispose();\r\n          System.Reflection.Assembly asmDatenbank = System.Reflection.Assembly.Load(buffer);\r\n          Type typeLoader = asmDatenbank.GetType(string.Concat(DatenbankName, \".\", AddressenLoader));\r\n          System.Activator.CreateInstance(typeLoader, this);\r\n        }\r\n    }\rpublic class Adresse\r\n    {\r\n        public Adresse(params string[] data)\r\n        {\r\n          this.data = data;\r\n        }\r\n        public string Nachname\r\n        {\r\n          get { return this.data[0]; }\r\n          set { this.data[0] = value; }\r\n        }\r\n        public string Vorname\r\n        {\r\n          get { return this.data[1]; }\r\n          set { this.data[1] = value; }\r\n        }\r\n        public string Strasse\r\n        {\r\n          get { return this.data[2]; }\r\n          set { this.data[2] = value; }\r\n        }\r\n        public string Postleitzahl\r\n        {\r\n          get { return this.data[3]; }\r\n          set { this.data[3] = value; }\r\n        }\r\n        public string Ort\r\n        {\r\n          get { return this.data[4]; }\r\n          set { this.data[4] = value; }\r\n        }\r\n        public string[] Daten\r\n        {\r\n          get { return this.data; }\r\n        }\r\n        public override string ToString()\r\n        {\r\n          return string.Concat(\r\n            Vorname, \" \", Nachname, \"\\r\\n\",\r\n            Strasse, \"\\r\\n\",\r\n            Postleitzahl, \" \", Ort);\r\n        }\r\n        private string[] data;\r\n    }\r/USE IT\r\n\t/*\r\n          AdressenListe adressenListe = new AdressenListe();\r\n          adressenListe.Add(new Adresse(\"Rossibaer\", \"Dankward\", \"Sonnenalle 9\", \"64325\", \"Mäuselwitz\"));\r\n          adressenListe.Add(new Adresse(\"Musterfrau\", \"Hannah\", \"Am Tor 1\", \"99999\", \"Mauerbach\" ));\r\n          adressenListe.Add(new Adresse(\"Mustermann\", \"Thomas\", \"Hinterm Bach 3\", \"64131\", \"Musterhausen\"));\r\n          adressenListe.Save();\r\n          adressenListe.Clear();\r\n          adressenListe.Load();\r\n          foreach (Adresse address in adressenListe)\r\n          {\r\n            Console.WriteLine();\r\n            Console.WriteLine(address);\r\n          }\r\n          Console.ReadKey();\r\n\t*/\t",
      "sub_sub": 61,
      "sub": 6,
      "lang": 1,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 116,
      "titel": "Create Table",
      "text": "CREATE TABLE [dbo].[ih_bericht_41Kap_hpl_komp](\r\n\t[bericht] [int] NOT NULL,\r\n\t[grob] [text] NULL,\r\n\t[kog] [text] NULL,\r\n\t[fein] [text] NULL,\r\n\t[sprache] [text] NULL,\r\n\t[soz] [text] NULL,\r\n\t[leben] [text] NULL,\r\n\t[ziel] [int] NULL,\r\n CONSTRAINT [FK_ih_bericht_41Aut_bericht] \r\n\t\t\tFOREIGN KEY([bericht])\r\n\t\t\tREFERENCES [dbo].[bericht] ([b_id]) ON DELETE CASCADE,\r\n CONSTRAINT [PK_ih_bericht_41Aut] \r\n\t\t\tPRIMARY KEY CLUSTERED ([bericht] ASC)\r\n\t\t\tWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\r\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]",
      "sub_sub": 69,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 117,
      "titel": "Cursor",
      "text": "DECLARE vendor_cursor CURSOR FOR   \r\nSELECT VendorID, Name  \r\nFROM Purchasing.Vendor  \r\nWHERE PreferredVendorStatus = 1  \r\nORDER BY VendorID;  \r\n\r\nOPEN vendor_cursor  \r\n\r\nFETCH NEXT FROM vendor_cursor   \r\nINTO @vendor_id, @vendor_name  \r\n\r\nWHILE @@fetch_status <> 0\r\nBEGIN  \r\n\r\nEND   \r\nCLOSE vendor_cursor;  \r\nDEALLOCATE vendor_cursor;  \r\n",
      "sub_sub": 70,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 92,
      "titel": "Cursor",
      "text": "create PROCEDURE [dbo].[udp_fill_sender_genre]\r\nAS\r\nDECLARE @ID INT\r\nSET @ID = 0\r\ndeclare c_re cursor for select id from tv_sender        \r\nopen c_re\r\nwhile (0 = 0) begin\r\n\tfetch next from c_re into @ID\r\n\tif (@@fetch_status &#x3C;> 0) break\r\n\tinsert into tv_sender_genre (sender,genre) values(@ID,5)\r\nend\r\nclose c_re\r\ndeallocate c_re",
      "sub_sub": 48,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 72,
      "titel": "Cursor Abfrage",
      "text": "CREATE PROCEDURE udp_insertHafenWasser (@VO datetime)\r\nAS\r\nBEGIN\r\n\tdeclare @id int\r\n\tdeclare @wasser int\r\n\tdeclare c_rd cursor for\r\n\t\tselect id, gewaesser from dbo.haefen where datum > @VO\r\n\r\n\topen c_rd\r\n\twhile (0 = 0) begin\r\n\t\tfetch next from c_rd into @id, @wasser\r\n\t\tif (@@fetch_status <> 0) break\r\n\t\tinsert into hafen_gewaesser (hafen, wasser) values(@id, @wasser);\r\n\tend\t\r\n\tclose c_rd\r\n\tdeallocate c_rd\r\nEND\r\r",
      "sub_sub": 35,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 103,
      "titel": "Datei mit entsprechendem Programm öffnen",
      "text": "System.Diagnostics.Process.Start(\"Pfad\")",
      "sub_sub": 59,
      "sub": 1,
      "lang": 1,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 31,
      "titel": "Dateien",
      "text": "Ganzen Ordner löschen\r\n1. Im Explorer Ordner löschen\r\n2. warten bis der Löschvorgang läuft\r\n3. rechte Schift Taste + Enter drücken",
      "sub_sub": 17,
      "sub": 13,
      "lang": 13,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 4,
      "titel": "Datenbank Export mit Daten",
      "text": "Installation auf x64 System\r\nhttp://www.microsoft.com/downloads/de-de/details.aspx?familyid=56e5b1c5-bf17-42e0-a410-371a838e570a\r\n\r\nX64 Package (SQLServer2005_XMO_x64.msi) - 14675 KB\r\nhttp://www.microsoft.com/en-us/download/details.aspx?id=17943#XMO\r\n\r\nbeide Dateien downloaden und installieren\r\naus Visual Studio 2005 Ansicht -> Server-Explorer -> neue Datenbankverbindung\r\nauf Datenbank der Wahl das Kontextmenu 'An Anbieter veröffentlichen' auswählen\r\ndanach weiter mit\r\n\r\nHowTo\r\nhttp://products.secureserver.net/products/hosting/PublishingWithDPW.htm\r\noder selber testen",
      "sub_sub": 3,
      "sub": 6,
      "lang": 1,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 2,
      "titel": "Datenbank verkleinern",
      "text": "http://blog.pmd-media.com/2009/10/08/howto-verkleinern-einer-microsoft-sql-server-datenbank#axzz1tpF8l7OB\r-- Geben Sie den Namen der Datenbank an, deren Indizes neu aufgebaut werden sollen\r\nUSE ede\r\n\r\nDECLARE @TableName varchar(255)\r\nDECLARE TableCursor CURSOR FOR\r\nSELECT table_name FROM information_schema.tables\r\nWHERE table_type = 'base table'\r\n\r\nOPEN TableCursor\r\n\r\nFETCH NEXT FROM TableCursor INTO @TableName\r\nWHILE @@FETCH_STATUS = 0\r\nBEGIN\r\nDBCC DBREINDEX(@TableName,' ',90)\r\nFETCH NEXT FROM TableCursor INTO @TableName\r\nEND\r\n\r\nCLOSE TableCursor\r\nDEALLOCATE TableCursor\r\n\r\ngo\r\n\r\n--hier die Datenbank eintragen, die oben im use angegeben wurde!!!!!\r\ndbcc shrinkdatabase    (ede, NOTRUNCATE)\r\ngo\r\ndbcc shrinkdatabase    (ede, TRUNCATEONLY)\r\ngo\r\n--hier den zur Datenbank gehörende log datei namen ohne Endung eintragen!!!!!\r\nDBCC SHRINKFILE (projectmanager_log, 1);\r",
      "sub_sub": 2,
      "sub": 2,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 35,
      "titel": "Datenbanken auslesen",
      "text": "-- liefert alle Datenbanken des Servers + größe\r\nexec sp_databases;\r\n--liefert mehr Infos\r\nselect * from sys.databases\r\n\r\n-- liefert alle Tabellen und Views einer Datenbank\r\nexec sp_tables  @table_name = '%', @table_owner = 'dbo', @table_qualifier = 'datenbnakName';\r\n\r\n--liefert alle Spalten einer Tabelle oder View\r\nEXEC sp_columns @table_name = N'tabellenName'\r\n\r\n--liefert alle Prozeduren\r\nSELECT * FROM sys.procedures;\r\n\r\n--liefert alle Parameter einer Prozedur\r\nSELECT * FROM information_schema.parameters WHERE specific_name = 'prozedurName'",
      "sub_sub": 19,
      "sub": 2,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 94,
      "titel": "Datum nur jahr monat tag",
      "text": "convert(char(10), p.gebdat, 104) gebdat",
      "sub_sub": 50,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 70,
      "titel": "Debuger",
      "text": "EXEC sp_configure 'show advanced options' , '1';\r\ngo\r\nreconfigure;\r\ngo\r\nEXEC sp_configure 'clr enabled' , '1'\r\ngo\r\nreconfigure;",
      "sub_sub": 33,
      "sub": 2,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 115,
      "titel": "Doppelte Einträge finden",
      "text": "SELECT r_nr , COUNT(fallhilfe)\r\nFROM lea_rechnung where r_nr is not null\r\nGROUP BY r_nr\r\nHAVING (COUNT(fallhilfe) > 1) ",
      "sub_sub": 68,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 54,
      "titel": "Drag Drop",
      "text": "<ListView x:Name=\"DragList\"  PreviewMouseLeftButtonDown=\"List_PreviewMouseLeftButtonDown\"  PreviewMouseMove=\"List_MouseMove\"/>\rprivate void List_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)\r\n{\r\n    // Store the mouse position\r\n    startPoint = e.GetPosition(null);\r\n}\r\n\r\nprivate void List_MouseMove(object sender, MouseEventArgs e)\r\n{\r\n    // Get the current mouse position\r\n    Point mousePos = e.GetPosition(null);\r\n    Vector diff = startPoint - mousePos;\r\n \r\n    if (e.LeftButton == MouseButtonState.Pressed &&  Math.Abs(diff.X) > SystemParameters.MinimumHorizontalDragDistance || Math.Abs(diff.Y) > SystemParameters.MinimumVerticalDragDistance )\r\n    {\r\n        // Get the dragged ListViewItem\r\n        ListView listView = sender as ListView;\r\n        ListViewItem listViewItem =  FindAnchestor<ListViewItem>((DependencyObject)e.OriginalSource); \r\n        // Find the data behind the ListViewItem\r\n        Contact contact = (Contact)listView.ItemContainerGenerator. ItemFromContainer(listViewItem); \r\n        // Initialize the drag & drop operation\r\n        DataObject dragData = new DataObject(\"myFormat\", contact );\r\n        DragDrop.DoDragDrop(listViewItem, dragData, DragDropEffects.Move);\r\n    } \r\n}\r<ListView x:Name=\"DropList\"  Drop=\"DropList_Drop\" DragEnter=\"DropList_DragEnter\"  AllowDrop=\"True\" />\rprivate void DropList_DragEnter(object sender, DragEventArgs e)\r\n{\r\n    if (!e.Data.GetDataPresent(\"myFormat\") || sender == e.Source)\r\n    {\r\n        e.Effects = DragDropEffects.None;\r\n    }\r\n}\r\n\r\nprivate void DropList_Drop(object sender, DragEventArgs e)\r\n{\r\n    if (e.Data.GetDataPresent(\"myFormat\"))\r\n    {\r\n        Contact contact = e.Data.GetData(\"myFormat\") as Contact;\r\n        ListView listView = sender as ListView;\r\n        listView.Items.Add(contact);\r\n    }\r\n}",
      "sub_sub": 26,
      "sub": 7,
      "lang": 11,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 121,
      "titel": "drop index",
      "text": "DROP INDEX [IX_lea_fall_debit] ON [dbo].[lea_fall_debitor]",
      "sub_sub": 74,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 11,
      "titel": "Entity Framework Connection String",
      "text": "string providerName = \"System.Data.SqlClient\";\r\nSqlConnectionStringBuilder sqlBuilder = new SqlConnectionStringBuilder();\r\nsqlBuilder.DataSource = ConfObj.GetConfigValueByName(\"Database\", \"Db.Server\");\r\nsqlBuilder.InitialCatalog = ConfObj.GetConfigValueByName(\"Database\", \"Db.Database\");\r\nsqlBuilder.UserID = ConfObj.GetConfigValueByName(\"Database\", \"Db.User\");\r\nsqlBuilder.Password = ConfObj.GetConfigValueByName(\"Database\", \"Db.Password\");\r\nsqlBuilder.IntegratedSecurity = true;\r\nstring providerString = sqlBuilder.ToString();\r\nEntityConnectionStringBuilder entityBuilder = new EntityConnectionStringBuilder();\r\nentityBuilder.Provider = providerName;\r\nentityBuilder.ProviderConnectionString = providerString;\r\nentityBuilder.Metadata = @\"res://*/SnippetDb.csdl|res://*/SnippetDb.ssdl|res://*/SnippetDb.msl\";                        \r\nthis.dbContext = new snippetEntities(entityBuilder.ToString());\rDatenbankverbindung im Controler setzen\r\nDaten aus der Config.xml holen",
      "sub_sub": 8,
      "sub": 8,
      "lang": 1,
      "sort": 1,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 13,
      "titel": "Entity Framework Dispose",
      "text": "das Entity Object in Window_Closing Disposen\rif (dbContext != null)\r\n{\r\n\tthis.dbContext.Dispose();\r\n\tthis.dbContext = null;\r\n}  ",
      "sub_sub": 9,
      "sub": 8,
      "lang": 1,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 108,
      "titel": "Event",
      "text": "   '#### CLASS NAMED clsTEST\r\n    Public WithEvents btn As MSForms.CommandButton\r\n    Public frm As UserForm\r\n\r\n    'Dim iCount As Long\r\n\r\n    Private Sub btn_Click()\r\n\t\t'iCount = IIf(iCount < 1, 1, iCount + 1)\r\n\t\tbtn.Caption = btn.Name\r\n\tEnd Sub\r\n'### END CLASS\rDim mColButtons As New Collection    '## SET A NEW COLLECTION\r\n\r\n    Private Sub UserForm_Activate()\r\n    '\r\n    Dim btnEvent As clsTEST\r\n    Dim ctl As MSForms.Control\r\n    '\r\n    Set ctl = Me.Controls.Add(\"Forms.CommandButton.1\")\r\n    '\r\n    With ctl\r\n    .Caption = \"XYZ\"\r\n    .Name = \"AButton\"\r\n    END With\r\n    '\r\n    Set btnEvent = new clsTEST   \r\n    Set btnEvent.btn = ctl\r\n    set btnEvent.frm = Me\r\n    '\r\n    mColButtons.add btnEvent\r\n    'End Sub",
      "sub_sub": 62,
      "sub": 20,
      "lang": 16,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 19,
      "titel": "Excel",
      "text": "using Excel = Microsoft.Office.Interop.Excel; \r// Variablen deklarieren \r\nExcel.Application myExcelApplication = null;\r\nExcel.Workbook myExcelWorkbook = null;\r\nExcel.Worksheet myExcelWorkSheet = null;\r\ntry\r\n{                \r\n    //Excel Prozess initialisieren\r\n    myExcelApplication = new Excel.Application();\r\n    myExcelApplication.Visible = true;\r\n    myExcelApplication.ScreenUpdating = true;\r\n    // Excel Datei anlegen: Workbook\r\n    int myCount = myExcelApplication.Workbooks.Count;\r\n    myExcelWorkbook = (Excel.Workbook)(myExcelApplication.Workbooks.Add(System.Reflection.Missing.Value));\r\n    myExcelWorkSheet = (Excel.Worksheet)myExcelWorkbook.ActiveSheet;\r\n    // Überschriften eingeben \r\n    myExcelWorkSheet.Cells[2, 2] = \"Hamburg\";    // Zelle B2\r\n    myExcelWorkSheet.Cells[2, 3] = \"Nürnberg\";   // Zelle C2\r\n    myExcelWorkSheet.Cells[2, 4] = \"Bremen\";    // Zelle D2 \r\n    // Formatieren der Überschrift\r\n    Excel.Range myRangeHeadline;\r\n    myRangeHeadline = myExcelWorkSheet.get_Range(\"B2\", \"D2\");\r\n    myRangeHeadline.Font.Bold = true;\r\n    myRangeHeadline.HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;\r\n    myRangeHeadline.Borders.Weight = Excel.XlBorderWeight.xlThick;\r\n    // Daten eingeben\r\n    myExcelWorkSheet.Cells[3, 2] = \"18\";\r\n    myExcelWorkSheet.Cells[3, 3] = \"21\";\r\n    myExcelWorkSheet.Cells[3, 4] = \"11\";\r\n    myExcelWorkSheet.Cells[4, 2] = \"21\";\r\n    myExcelWorkSheet.Cells[4, 3] = \"32\";\r\n    myExcelWorkSheet.Cells[4, 4] = \"22\";\r\n    myExcelWorkSheet.Cells[5, 2] = \"12\";\r\n    myExcelWorkSheet.Cells[5, 3] = \"56\";\r\n    myExcelWorkSheet.Cells[5, 4] = \"14\";\r\n    myExcelWorkSheet.Name = \"Kunden\";\r\n    // Excel Datei abspeichern\r\n    // wenn die Datei vorher vorhanden ist, kommt in Excel eine Fehlermeldung.\r\n    string path =  AppDomain.CurrentDomain + @\"\\TestExcel.xls\";\r\n    try\r\n    {\r\n        if (File.Exists(path))\r\n        {\r\n            File.Delete(path);\r\n        }\r\n\r\n        myExcelWorkbook.Close(true, path, System.Reflection.Missing.Value);\r\n    }\r\n    catch (Exception ex)\r\n    {                    \r\n        throw ex;\r\n    }\r\n}\r\ncatch (Exception ex)\r\n{\r\n    MessageBox.Show(ex.Message);\r\n}\r\nfinally\r\n{\r\n    // Excel beenden\r\n    if (myExcelApplication != null)\r\n    {\r\n        myExcelApplication.Quit();\r\n    }\r\n}    \rstring path =  AppDomain.CurrentDomain.BaseDirectory + @\"TestExcel.xls\";\r\nExcel.Application myExcelApplication = new Excel.Application();\r\nExcel.Workbook myExcelWorkbook = null;\r\nExcel.Worksheet myExcelWorkSheet = null;\r\nExcel.Sheets sheets = null;\r\nmyExcelApplication.Visible = false;\r\n\r\ntry\r\n{\r\n    if (File.Exists(path))\r\n    {                    \r\n        myExcelWorkbook = myExcelApplication.Workbooks.Open(\r\n            path,\r\n            ExcelKonstanten.UpdateLinks.DontUpdate,\r\n            ExcelKonstanten.ReadWrite,\r\n            ExcelKonstanten.Format.Nothing,\r\n            \"\", // Passwort\r\n            \"\", // WriteResPasswort\r\n            ExcelKonstanten.IgnoreReadOnlyRecommended,\r\n            Excel.XlPlatform.xlWindows,\r\n            \"\", // Trennzeichen\r\n            ExcelKonstanten.Editable,\r\n            ExcelKonstanten.DontNotifiy,\r\n            ExcelKonstanten.Converter.Default,\r\n            ExcelKonstanten.DontAddToMru,\r\n            ExcelKonstanten.Local,\r\n            ExcelKonstanten.CorruptLoad.NormalLoad);\r\n                    \r\n        // Arbeitsblätter lesen\r\n        sheets = myExcelWorkbook.Worksheets;\r\n\r\n        // ein Arbeitsblatt auswählen…\r\n        myExcelWorkSheet = (Excel.Worksheet)sheets.get_Item(\"Kunden\");                                        \r\n        Excel.Range myRangeValues = myExcelWorkSheet.get_Range(\"B3\", \"D5\");\r\n        Excel.Chart myChart = (Excel.Chart)myExcelWorkbook.Charts.Add(\r\n        System.Reflection.Missing.Value,\r\n        System.Reflection.Missing.Value,\r\n        System.Reflection.Missing.Value,\r\n        System.Reflection.Missing.Value);\r\n\r\n        myChart.ChartWizard(\r\n        myRangeValues,\r\n        Excel.XlChartType.xl3DColumn,\r\n        System.Reflection.Missing.Value,\r\n        Excel.XlRowCol.xlRows,\r\n        System.Reflection.Missing.Value,\r\n        System.Reflection.Missing.Value,\r\n        System.Reflection.Missing.Value,\r\n        \"Titel\",\r\n        \"Kunden\",\r\n        \"Anzahl\",\r\n        System.Reflection.Missing.Value);\r\n        myChart.CopyPicture(Excel.XlPictureAppearance.xlScreen,\r\n        Excel.XlCopyPictureFormat.xlBitmap,\r\n        Excel.XlPictureAppearance.xlScreen);\r\n        myChart.Location(Excel.XlChartLocation.xlLocationAsObject, myExcelWorkSheet.Name);\r\n        myExcelWorkbook.Close(true, path, System.Reflection.Missing.Value);\r\n\r\n    }\r\n}\r\ncatch (Exception ex)\r\n{\r\n    MessageBox.Show(ex.Message);\r\n}\r\nfinally\r\n{\r\n    // Excel beenden\r\n    if (myExcelApplication != null)\r\n    {\r\n        myExcelApplication.Quit();\r\n    }\r\n\r\n    sheets = null;\r\n    myExcelWorkSheet = null;\r\n    myExcelWorkbook = null;\r\n    myExcelApplication = null;\r\n}  \rExcel datei erstellen\rExcel lesen und Chart erstellen",
      "sub_sub": 12,
      "sub": 10,
      "lang": 1,
      "sort": 1,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 68,
      "titel": "Externe Exe öffnen",
      "text": "string exe = string.Format(@\"{0}&#x5C;Ext&#x5C;IrfanViewPortable&#x5C;IrfanViewPortable.exe\", Application.StartupPath);\r\nSystem.Diagnostics.Process.Start(exe);",
      "sub_sub": 31,
      "sub": 6,
      "lang": 1,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 36,
      "titel": "Framework und Bit Version",
      "text": "string framework = string.Empty;\r\nif (Environment.Version.Major == 2)\r\n {\r\n\tframework = \" Framework 2.0]\";\r\n}\r\nelse if (Environment.Version.Major == 4)\r\n{\r\n\tframework = \" Framework 4.0]\";\r\n}\r\nelse\r\n{\r\n\tframework = \" Framework \" + Environment.Version + \"]\";\r\n}\r\n\r\nstring ptr = string.Empty;\r\nif (IntPtr.Size == 4)\r\n{\r\n\tptr = \" [32 Bit\";\r\n}\r\nelse\r\n{\r\n\tptr = \" [64 Bit\";\r\n}",
      "sub_sub": 20,
      "sub": 6,
      "lang": 1,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 24,
      "titel": "Get Count",
      "text": "let getDirSizeAllFiles dirname = \r\n    let getfiles dirname = seq { yield! Directory.GetFiles(dirname,\"*\",SearchOption.AllDirectories) }    \r\n    let (totalsizeTmp : uint64) = \r\n        dirname\r\n        |> getfiles\r\n        |> Seq.map (fun file -> uint64((new FileInfo(file)).Length))\r\n        |> Seq.sum\r\n            \r\n    makeGb (double(totalsizeTmp) )  \rlet getCountFiles dirname = \r\n    let anzahlfiles = Directory.GetFiles(dirname,\"*\",SearchOption.AllDirectories).Length \r\n    anzahlfiles\rlet  getdirnamen folder = \r\n    let getfolders folder =  (seq { yield! Directory.GetDirectories(folder,\"*\",SearchOption.AllDirectories) } )            \r\n    \r\n    let copyListFolder = \r\n        folder \r\n        |> getfolders              \r\n        |> Seq.iter (fun folder -> (printfn \"%s\" (folder)) )              \r\n    ()  ",
      "sub_sub": 13,
      "sub": 11,
      "lang": 3,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 90,
      "titel": "HAVING",
      "text": "SELECT department, SUM(sales) AS \"Total sales\"\r\nFROM order_details\r\nGROUP BY department\r\nHAVING SUM(sales) > 1000;",
      "sub_sub": 46,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 96,
      "titel": "Html Tags in Formel",
      "text": "http://stackoverflow.com/questions/12791321/what-html-tags-are-supported-in-crystal-reports-2008\r\nFormelfeld im Report markieren, rechte Maus Menu Feld formatieren\r\nTabulator Abstaz -> Combo Text inerpretieren -> HTML Text",
      "sub_sub": 52,
      "sub": 19,
      "lang": 15,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 80,
      "titel": "IComparer",
      "text": "public class AltersgruppeComparer : IComparer<Altersgruppe>\r\n    {\r\n        public int Compare(Altersgruppe x, Altersgruppe y)\r\n        {\r\n            int returnValue = 1;\r\n            if (x != null && y != null)\r\n            {\r\n                if ((x.GetType() == typeof(Altersgruppe)) && (y.GetType() == typeof(Altersgruppe)))\r\n                {\r\n                    returnValue = x.DataValue.CompareTo(y.DataValue);\r\n                }                \r\n            }\r\n\r\n            return returnValue;\r\n        }\r\n    }",
      "sub_sub": 38,
      "sub": 6,
      "lang": 1,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 91,
      "titel": "IDENTITY_INSERT",
      "text": "SET IDENTITY_INSERT dbo.Tool ON;\r\n--do something insert autoincrement id\r\nSET IDENTITY_INSERT dbo.Tool OFF;",
      "sub_sub": 47,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 89,
      "titel": "if exist",
      "text": "--Tabellen\r\nif not exists (select * from sys.tables where name = 'lea_reg_team')\r\n\r\n-- Spalten\r\nif not exists (select * from sys.columns where object_id in (select object_id from sys.tables where name = 'fall_u_rrz') and name = 'fh')\r\n\r\n--prozeduren\r\nIF NOT EXISTS (SELECT * FROM sysobjects WHERE id = object_id(N'udp_ih_beiblatt_komplex'))\r\n\r\n--views\r\nif not exists (SELECT * FROM sys.views where name = 'v_ih_fplan_komplexleistungen')\r\n\r\n--function",
      "sub_sub": 45,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 67,
      "titel": "if exist",
      "text": "IF EXISTS(select * FROM sys.views where name = 'viewname')\r\nDROP VIEW viewname ;\r\n\r\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ih_durchf_ort]') AND type in (N'U'))\r\nDROP TABLE Tablename\r\n\r\nIF EXISTS (SELECT * FROM sysobjects WHERE id = object_id(N'Prozedurname') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)\r\nDROP PROCEDURE Prozedurname",
      "sub_sub": 30,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 112,
      "titel": "If Exist Function",
      "text": "IF NOT EXISTS (SELECT * FROM  sys.objects WHERE  object_id = OBJECT_ID(N'[dbo].[ih_is_komplex]') AND type IN ( N'FN', N'IF', N'TF', N'FS', N'FT' ))",
      "sub_sub": 65,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 119,
      "titel": "If Exists Coloum",
      "text": "IF COL_LENGTH('table_name','column_name') IS NULL",
      "sub_sub": 72,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 110,
      "titel": "If Exists Column",
      "text": "IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'bericht44' AND COLUMN_NAME = 'anmerk') ",
      "sub_sub": 63,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 111,
      "titel": "If Exists Procedure",
      "text": "IF NOT EXISTS ( SELECT * FROM  sys.objects WHERE   object_id = OBJECT_ID(N'udp_lea_ausw_verwaltung') AND type IN ( N'P', N'PC' ) ) ",
      "sub_sub": 64,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 120,
      "titel": "If Exists Procedure",
      "text": "IF (OBJECT_ID('MyProcedure') IS NOT NULL)\r\n  DROP PROCEDURE MyProcedure\r\nGO",
      "sub_sub": 73,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 114,
      "titel": "If Exists Table",
      "text": "if not exists (select * from sys.tables where name = 'lea_ausw_tmp_team')",
      "sub_sub": 67,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 113,
      "titel": "If Exists View",
      "text": "if not exists (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[v_edok_faelle_u_arbeit]') )",
      "sub_sub": 66,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 27,
      "titel": "Inner Join",
      "text": "SELECT vp.sprache, l.text, vp.version, v.v_nr  from Version_sprache vp\r\ninner join Lang l on vp.sprache = l.id \r\ninner join Versionen v on vp.version = v.id;",
      "sub_sub": 14,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 101,
      "titel": "Kalender nur Arbeitstage",
      "text": "Declare @StartDate date = '01.05.2016', @EndDate date  = '31.05.2016',@count int;\r\nWITH    Kalender\r\n           AS ( SELECT   @StartDate AS [Tag]\t\r\n                UNION ALL\t\t\t\t\t\t\t\t\t\t\r\n                SELECT   DATEADD(dd, 1, [Tag])\r\n                FROM     Kalender\r\n                WHERE    DATEADD(dd, 1, [Tag] ) &#x3C;= @EndDate\r\n              )\r\nSelect @count= count(*)\r\nfrom Kalender k\r\nwhere DATEPART(WeekDay, Tag) not in (6, 7) and Tag not in (select ft_dat from feiertage where ft_gesetzl = 1)\r\nOPTION  ( MAXRECURSION 0 )",
      "sub_sub": 57,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 81,
      "titel": "Listview Coloum Sort",
      "text": "private ListViewColumnSorter lvwColumnSorter;\r\n\r\n//in Foem Load\r\nlvwColumnSorter = new ListViewColumnSorter();\r\nthis.listView1.ListViewItemSorter = lvwColumnSorter;\r\n\r\n//in listViewGenhem_ColumnClick(object sender, ColumnClickEventArgs e)\r\n// Determine if clicked column is already the column that is being sorted.\r\nif ( e.Column == lvwColumnSorter.SortColumn )\r\n{\r\n\t// Reverse the current sort direction for this column.\r\n\tif (lvwColumnSorter.Order == SortOrder.Ascending)\r\n\t{\r\n\t\tlvwColumnSorter.Order = SortOrder.Descending;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tlvwColumnSorter.Order = SortOrder.Ascending;\r\n\t}\r\n}\r\nelse\r\n{\r\n\t// Set the column number that is to be sorted; default to ascending.\r\n\tlvwColumnSorter.SortColumn = e.Column;\r\n\tlvwColumnSorter.Order = SortOrder.Ascending;\r\n}\r\n\r\n// Perform the sort with these new sort options.\r\nthis.listView1.Sort();\r//Klasse für sort\r\nusing System.Collections;\t\r\nusing System.Windows.Forms;\r\n\r\n/// <summary>\r\n/// This class is an implementation of the 'IComparer' interface.\r\n/// </summary>\r\npublic class ListViewColumnSorter : IComparer\r\n{\r\n\t/// <summary>\r\n\t/// Specifies the column to be sorted\r\n\t/// </summary>\r\n\tprivate int ColumnToSort;\r\n\t/// <summary>\r\n\t/// Specifies the order in which to sort (i.e. 'Ascending').\r\n\t/// </summary>\r\n\tprivate SortOrder OrderOfSort;\r\n\t/// <summary>\r\n\t/// Case insensitive comparer object\r\n\t/// </summary>\r\n\tprivate CaseInsensitiveComparer ObjectCompare;\r\n\r\n\t/// <summary>\r\n\t/// Class constructor.  Initializes various elements\r\n\t/// </summary>\r\n\tpublic ListViewColumnSorter()\r\n\t{\r\n\t\t// Initialize the column to '0'\r\n\t\tColumnToSort = 0;\r\n\r\n\t\t// Initialize the sort order to 'none'\r\n\t\tOrderOfSort = SortOrder.None;\r\n\r\n\t\t// Initialize the CaseInsensitiveComparer object\r\n\t\tObjectCompare = new CaseInsensitiveComparer();\r\n\t}\r\n\r\n\t/// <summary>\r\n\t/// This method is inherited from the IComparer interface.  It compares the two objects passed using a case insensitive comparison.\r\n\t/// </summary>\r\n\t/// <param name=\"x\">First object to be compared</param>\r\n\t/// <param name=\"y\">Second object to be compared</param>\r\n\t/// <returns>The result of the comparison. \"0\" if equal, negative if 'x' is less than 'y' and positive if 'x' is greater than 'y'</returns>\r\n\tpublic int Compare(object x, object y)\r\n\t{\r\n\t\tint compareResult;\r\n\t\tListViewItem listviewX, listviewY;\r\n\r\n\t\t// Cast the objects to be compared to ListViewItem objects\r\n\t\tlistviewX = (ListViewItem)x;\r\n\t\tlistviewY = (ListViewItem)y;\r\n\r\n\t\t// Compare the two items\r\n\t\tcompareResult = ObjectCompare.Compare(listviewX.SubItems[ColumnToSort].Text,listviewY.SubItems[ColumnToSort].Text);\r\n\t\t\t\r\n\t\t// Calculate correct return value based on object comparison\r\n\t\tif (OrderOfSort == SortOrder.Ascending)\r\n\t\t{\r\n\t\t\t// Ascending sort is selected, return normal result of compare operation\r\n\t\t\treturn compareResult;\r\n\t\t}\r\n\t\telse if (OrderOfSort == SortOrder.Descending)\r\n\t\t{\r\n\t\t\t// Descending sort is selected, return negative result of compare operation\r\n\t\t\treturn (-compareResult);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Return '0' to indicate they are equal\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n    \r\n\t/// <summary>\r\n\t/// Gets or sets the number of the column to which to apply the sorting operation (Defaults to '0').\r\n\t/// </summary>\r\n\tpublic int SortColumn\r\n\t{\r\n\t\tset\r\n\t\t{\r\n\t\t\tColumnToSort = value;\r\n\t\t}\r\n\t\tget\r\n\t\t{\r\n\t\t\treturn ColumnToSort;\r\n\t\t}\r\n\t}\r\n\r\n\t/// <summary>\r\n\t/// Gets or sets the order of sorting to apply (for example, 'Ascending' or 'Descending').\r\n\t/// </summary>\r\n\tpublic SortOrder Order\r\n\t{\r\n\t\tset\r\n\t\t{\r\n\t\t\tOrderOfSort = value;\r\n\t\t}\r\n\t\tget\r\n\t\t{\r\n\t\t\treturn OrderOfSort;\r\n\t\t}\r\n\t}\r\n    \r\n}",
      "sub_sub": 39,
      "sub": 6,
      "lang": 1,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 30,
      "titel": "Mdf Ldf Db Umzug",
      "text": "-- Verwendung der gespeicherten Prozedur sp_helpfile aktuellen Speicherort ermitteln:\r\nuse fitnessSql\r\ngo\r\nsp_helpfile\r\ngo\r\n-- Trennen der Datenbank:\r\nuse master\r\ngo\r\nsp_detach_db 'fitnessSql'\r\ngo\r\n-- Kopieren der mdf und ldf an den neuen Speicherort \r\n-- anfügen der Datenbank mit dem neuen Speicherort:\r\nuse master   \r\ngo   \r\nsp_attach_db 'fitnessSql','I:\\mssql\\sql2008\\fitnessSql.mdf','I:\\mssql\\sql2008\\fitnessSql_log.ldf'   \r\ngo\r. mit Server verbinden\r\n. neue Abfrage auf master Tabelle\r\n. snippet in die Abfrage kopieren\r\n. Datenbankname und Pfad ändern\r\n. Server trennen\r\n. Abfrage Zeile 7 bis 10 ausführen (Trennen der Datenbank)\r\n. kopieren der mdf und ldf an den neuen Speicherort\r\n. Abfrage Zeile 13 bis 16 ausführen (Verbinden der Datenbank mit neuem Speicherort)\r--Datenbank LDF und MDF Pfad ermitteln\r\nselect f.physical_name from sys.master_files f\r\ninner join sys.databases d on f.database_id = \r\n(select top 1 database_id from sys.databases where name = 'DatenbankName') \r\ngroup by f.physical_name",
      "sub_sub": 16,
      "sub": 2,
      "lang": 4,
      "sort": 1,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 79,
      "titel": "Notpad mit Datei öffnen",
      "text": "ProcessStartInfo proc = new ProcessStartInfo();\r\nproc.Filename = \"notepad.exe\";\r\nproc.Arguments = \"meineTextDatei.txt\";\r\nProcess.Start(proc);",
      "sub_sub": 37,
      "sub": 1,
      "lang": 1,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 32,
      "titel": "Ordner",
      "text": "Ganze Ordner verschieben oder kopieren\r\n1. Regdatei  als kopieren_verschieben.reg anlegen\r\n\r\n//#######################################\r\nWindows Registry Editor Version 5.00\r\n\r\n[HKEY_CLASSES_ROOT\\AllFilesystemObjects\\shellex\\ContextMenuHandlers]\r\n\r\n[HKEY_CLASSES_ROOT\\AllFilesystemObjects\\shellex\\ContextMenuHandlers\\In Ordner kopieren]\r\n@=\"{C2FBB630-2971-11D1-A18C-00C04FD75D13}\"\r\n\r\n[HKEY_CLASSES_ROOT\\AllFilesystemObjects\\shellex\\ContextMenuHandlers\\In Ordner verschieben]\r\n@=\"{C2FBB631-2971-11D1-A18C-00C04FD75D13}\"\r\n//#########################################\r\n\r\ndanach die Datei ausführen (Administrator)\r\nnach der Ausfürung erscheinen im Explorer Kontextmenu die Einträge \r\nOrdner verschieben\r\nOrdner kopieren",
      "sub_sub": 18,
      "sub": 13,
      "lang": 13,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 15,
      "titel": "Paging mit Skip() und Take()",
      "text": "den Wert  skipCount und takeCount vorher setzen\r\nbei jedem Seitenwechsel muss skipCount angepasst werden\rlsttexte = this.GetDbContext.Texte.Include(\"text_content\").Where(p => p.sub_lang == sublangId).OrderByDescending(\r\np => p.datum).Skip(skipCount).Take(takeCount).ToList();",
      "sub_sub": 10,
      "sub": 9,
      "lang": 1,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 52,
      "titel": "Pattern example",
      "text": "//ganzes Wort suchen\r\n//ergebnissmenge 2 * create gefunden\r\nstring text = \"test create table create test\";\r\nRegex regex = new Regex(@\"create\", RegexOptions.None);\r\nbool bedingungWahr = regex.IsMatch(text)\r\n@\"^create$\"//ganzer Text genau wie Expression (^suche$)\r//'^' das Zeichen in der Klammer -> bedeutet negation\r\n//'^' vor der Klammer -> Untersuchung ab dem ersten Zeichen stopt beim ersten Fund\r\n//'$' am Ende -> erste bis letzde Zeichen\r\n@\"^[0-9]*$\" //Text nur aus Zahlen zwischen 0 und 9\r\n@\"^[0-9]$\" // Text nur eine Zahl zwischen 0 und 9\r\n@\"^[^0-9]*$\" //keine Zahlen im Text\r\n@\"^[0-9]{5}$\"//genaue Anzahl Ziffern (5)\r\n@\"((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$/_/*+%-/~]).{6,20})\" //Passwort mind 6 Zeichen 0-9 A-Z a-z und Sonderzeichen\r\n// (\t\t\t\t\t# Start of group\r\n//  (?=.*\\d)\t\t\t#   must contains one digit from 0-9\r\n//  (?=.*[a-z])\t\t#   must contains one lowercase characters\r\n//  (?=.*[A-Z])\t\t#   must contains one uppercase characters\r\n//  (?=.*[@#$%])\t\t#   must contains one special symbols in the list \"@#$%\"\r\n//  .\t\t\t\t\t#    match anything with previous condition checking\r\n//  {6,20}\t\t\t#    length at least 6 characters and maximum of 20\t\r\n// )\t\t\t\t\t# End of group\r\n",
      "sub_sub": 25,
      "sub": 16,
      "lang": 14,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 64,
      "titel": "PDF",
      "text": "using System;\r\nusing System.Diagnostics;\r\nusing System.IO;\r\nusing PdfSharp;\r\nusing PdfSharp.Drawing;\r\nusing PdfSharp.Pdf;\r\nusing PdfSharp.Pdf.IO;\rPdfDocument document = new PdfDocument();\r\ndocument.Info.Title = \"Created with PDFsharp\";\r\n// Create an empty page\r\nPdfPage page = document.AddPage();\r\n// Get an XGraphics object for drawing\r\nXGraphics gfx = XGraphics.FromPdfPage(page);\r\n//XPdfFontOptions options = new XPdfFontOptions(PdfFontEncoding.Unicode, PdfFontEmbedding.Always);\r\n// Create a font\r\nXFont font = new XFont(\"Verdana\", 20, XFontStyle.BoldItalic);\r\n// Draw the text\r\ngfx.DrawString(\"Hello, World!\", font, XBrushes.Black,\r\nnew XRect(0, 0, page.Width, page.Height),\r\nXStringFormats.Center);\r\n// Save the document...\r\nconst string filename = \"HelloWorld_tempfile.pdf\";\r\ndocument.Save(filename);\r\n// ...and start a viewer.\r\nProcess.Start(filename);\rDie externen DLL´s in  Projektverweise zufügen\r\nG:\\VS2010\\PDFCreator\\ReleaseDll\\PdfSharp.dll",
      "sub_sub": 29,
      "sub": 1,
      "lang": 1,
      "sort": 1,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 50,
      "titel": "Regestry",
      "text": "//SQL Server 2000\r\n//Default instance\r\nstring key = HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\MSSQLServer\\MSSQLServer\\SuperSocketNetLib\\TCP\r\n\r\n//Named instance\r\nstring key = HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SQL Server(InstanceName)\\MSSQLServer\\SuperSocketNetLib\\TCP\r\n\r\n//SQL Server 2005\r\n//There is no distinction between default and named instances. An instance is assigned a number based on the order it was installed. We first need to locate the registry key for the instance, which looks like\r\n//HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\MSSQL.#\r\n//'#' is the number assigned to the instance. The instance name is stored as the default value for this registry key. For a default instance, it is MSSQLSERVER.\r\n//Once the registry key for the instance is found, we know the TCP/IP registry key is\r\nstring key = HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\MSSQL.#\\MSSQLServer\\SuperSocketNetLib\\TCP\\IPAll\r\n\r\n//SQL Server 2008\r\n//Default instance\r\nstring key = HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\MSSQL10.MSSQLSERVER\\MSSQLServer\\SuperSocketNetLib\\TCP\\IPAll\r\n\r\n//Named instance\r\nstring key = HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\MSSQL10.(InstanceName)\\MSSQLServer\\SuperSocketNetLib\\TCP\\IPAll",
      "sub_sub": 24,
      "sub": 8,
      "lang": 1,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 40,
      "titel": "Report",
      "text": "Download VS2010\r\nhttp://www.businessobjects.com/jump/xi/crvs2010/us2_default.asp\r\nVS2010 Paket und Runtime x64 installieren\r\nnach der Installation VS2010 starten\r\nIn der Toolbox Reiter Allgemein rechte Maus Kontextmenu 'Element auswählen'\r\nunter Extension 'SAPBusinessObjects.WPF.Viewer' auswählen und hinzufügen\r\ndanach kann der Viewer aus der Toolbox verwendet werden\r<my1:CrystalReportsViewer ShowLogo=\"False\" ShowOpenFileButton=\"False\" ShowRefreshButton=\"False\" ShowToggleSidePanelButton=\"False\" ToggleSidePanel=\"None\"\r\n                HorizontalAlignment=\"Stretch\" VerticalAlignment=\"Stretch\" Margin=\"0,0,0,0\" Name=\"crystalReportsViewerLizenzen\"  />\r//Connection Objekt in Window_Loaded erstellen\r\nconInfo = new CrystalDecisions.Shared.ConnectionInfo();\r\nconInfo.ServerName = Controler.GetControler.ConfDaten.DbServer;\r\nconInfo.DatabaseName = Controler.GetControler.ConfDaten.DbDatabase;\r\nconInfo.UserID = Controler.GetControler.ConfDaten.DbUser;\r\nconInfo.Password = Controler.GetControler.ConfDaten.DbPwd; \r//resource = pfad zum Report z.B.: AppDomain.CurrentDomain.BaseDirectory + @\"Reports\\Lizenzen.rpt\";\r\nprivate void LoadReport(string resource)\r\n{\r\n\t if (report != null)\r\n\t{\r\n\t\treport.Close();\r\n\t\treport.Dispose();\r\n\t}\r\n\t                     \r\n\treport = new CrystalDecisions.CrystalReports.Engine.ReportDocument();\r\n\treport.Load(resource);\r\n\tif (report.IsLoaded)\r\n\t{\r\n\t\tdbBase = report.Database;\r\n\t\ttables = dbBase.Tables;\r\n\t\tforeach (CrystalDecisions.CrystalReports.Engine.Table table in tables)\r\n\t\t{\r\n\t\t\tlogInfo = table.LogOnInfo;\r\n\t\t\tlogInfo.ConnectionInfo = conInfo;\r\n\t\t\ttable.ApplyLogOnInfo(logInfo);\r\n\t\t}\r\n\t\t\r\n\t\tcrystalReportsViewerLizenzen.ViewerCore.ReportSource = report;\r\n\t}\r\n} \r//in Window_Closing report disposen\r\nif (report != null)\r\n{\r\n\treport.Close();\r\n\treport.Dispose();\r\n}\rDem Projekt zusätzlich die Verweise\r\nCrystalDecisions.CrystalReports.Engine 13.0\r\nCrystalDecisions.Shared 13.0\r\nzufügen",
      "sub_sub": 22,
      "sub": 15,
      "lang": 11,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 1,
      "titel": "Reset Autoincrement",
      "text": "DBCC CHECKIDENT('Tabellenname', RESEED, 0)",
      "sub_sub": 1,
      "sub": 2,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 5,
      "titel": "Reset Autoincrement",
      "text": "ALTER TABLE Tabellenname AUTO_INCREMENT = 0;",
      "sub_sub": 4,
      "sub": 4,
      "lang": 5,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 88,
      "titel": "Reset Autoincrement",
      "text": "DBCC CHECKIDENT (mytable, RESEED, 0)",
      "sub_sub": 44,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 100,
      "titel": "sekunden zu Stunden 2:30",
      "text": "--sekunden zu Stunden 2:30\r\nselect cast((130 / 60) as varchar(2)) + ':' + cast((130 % 60) as varchar(2))",
      "sub_sub": 56,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 87,
      "titel": "Server Version auslesen",
      "text": "--Auf Server Knoten neue Abfrage erstellen\r\n--dann:\r\nSELECT\r\n\tCASE SUBSTRING(CAST(SERVERPROPERTY('ProductVersion') AS VARCHAR(50)), 1, 4)\r\n\t\tWHEN '10.5' THEN '2008 R2'\r\n\t\tWHEN '11.0' THEN '2012'\r\n\tEND AS 'SQL Server',\r\n\tSERVERPROPERTY('ProductLevel') AS 'Level',\r\n\tSERVERPROPERTY('Edition') AS 'Edition',\r\n\tSERVERPROPERTY('ProductVersion') AS 'Version';",
      "sub_sub": 43,
      "sub": 2,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 17,
      "titel": "Spellchecker",
      "text": "private string CheckSpellingDialog(string text)\r\n        {\r\n            if (string.IsNullOrEmpty(text))\r\n            {\r\n                return string.Empty;\r\n            }\r\n\r\n            Type wordType = Type.GetTypeFromProgID(\"Word.Application\");\r\n            Type documentType;\r\n            object wordApp = null;\r\n            object documents = null;\r\n            object document = null;\r\n\r\n            object optional = reflection.Missing.Value;\r\n            object visible = false;\r\n\r\n            if (wordType != null)\r\n            {\r\n\t\t\t wordApp = Activator.CreateInstance(wordType);\r\n\t               documents = wordType.InvokeMember(\r\n\t                \t\"Documents\", reflection.BindingFlags.GetProperty | reflection.BindingFlags.OptionalParamBinding, null, wordApp, new object[0]);\r\n\t               document = documents.GetType().InvokeMember(\r\n\t                \t\"Add\", reflection.BindingFlags.InvokeMethod | reflection.BindingFlags.OptionalParamBinding, null, documents, new object[4] {\r\n\t\t               optional,\r\n\t\t               optional,\r\n\t\t               optional,\r\n\t\t               visible\r\n\t\t            });\r\n                \tdocumentType = document.GetType();\r\n            }\r\n            else\r\n            {\r\n                throw new ApplicationException(\"Microsoft Word ist nicht installiert! Die Rechtschreibprüfung benötigt Microsoft Word.\");\r\n            }\r\n\r\n            wordType.InvokeMember(\r\n            \t\t\"Visible\", reflection.BindingFlags.SetProperty | reflection.BindingFlags.OptionalParamBinding, null, wordApp, new object[1] { false });\r\n            object words = documentType.InvokeMember(\r\n           \t\t\"Words\", reflection.BindingFlags.GetProperty | reflection.BindingFlags.OptionalParamBinding, null, document, new object[0]);\r\n            object first = words.GetType().InvokeMember(\r\n            \t\t\"First\", reflection.BindingFlags.GetProperty | reflection.BindingFlags.OptionalParamBinding, null, words, new object[0]);\r\n            first.GetType().InvokeMember(\r\n            \t\t\"InsertBefore\", reflection.BindingFlags.InvokeMethod | reflection.BindingFlags.OptionalParamBinding, null, first, new object[1] { text });\r\n            documentType.InvokeMember(\r\n            \t\t\"CheckSpelling\", reflection.BindingFlags.InvokeMethod | reflection.BindingFlags.OptionalParamBinding, null, document, new object[0]);\r\n            object characters = documentType.InvokeMember(\r\n            \t\t\"Characters\", reflection.BindingFlags.GetProperty | reflection.BindingFlags.OptionalParamBinding, null, document, new object[0]);\r\n            object count = characters.GetType().InvokeMember(\r\n            \t\t\"Count\", reflection.BindingFlags.GetProperty | reflection.BindingFlags.OptionalParamBinding, null, characters, new object[0]);\r\n            object firstChar = 0;\r\n            object lastChar = (int)count - 1;\r\n           \tobject range = documentType.InvokeMember(\r\n            \t\t\"Range\", reflection.BindingFlags.InvokeMethod | reflection.BindingFlags.OptionalParamBinding, null, document, new object[2] { firstChar, lastChar });\r\n            object correctedString = range.GetType().InvokeMember(\r\n            \t\t\"Text\", reflection.BindingFlags.GetProperty | reflection.BindingFlags.OptionalParamBinding, null, range, new object[0]);\r\n            wordType.InvokeMember(\r\n            \t\t\"Quit\", reflection.BindingFlags.InvokeMethod | reflection.BindingFlags.OptionalParamBinding, null, wordApp, new object[1] { false });\r\n\r\n            return correctedString as string;\r\n        }\rtry\r\n{\r\n\tthis.Cursor = Cursors.WaitCursor;\r\n\tstring ret = CheckSpellingDialog(txtEingabe.Text.Trim()).Replace(\"\\r\", Environment.NewLine);\r\n\tif (!ret.Equals(txtEingabe.Text.Trim()))\r\n\t{\r\n\t\ttxtEingabe.Text = ret;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tGiss.ControlCollection.GissMessageBox.ShowMessageOk(\"Die Rechtschreibprüfung wurde beendet!\");\r\n\t}\r\n}\r\ncatch (Exception ex)\r\n{\r\n\tGiss.ControlCollection.GissMessageBox.ShowMessageOk(ex.Message);\r\n}\r\nfinally\r\n{\r\n\tthis.Cursor = Cursors.Default;\r\n}",
      "sub_sub": 11,
      "sub": 10,
      "lang": 1,
      "sort": 1,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 75,
      "titel": "Sql Regex",
      "text": "//Zuerst Assembly anlegen\r\nnamespace SqlServerRegex\r\n{\r\n    using Microsoft.SqlServer.Server;\r\n    using System.Text.RegularExpressions;\r\n\r\n    /// <summary>\r\n    /// \r\n    /// </summary>\r\n    public partial class ClassSqlRegEx\r\n    {\r\n\r\n        /// <summary>\r\n        /// Matches the specified text.\r\n        /// </summary>\r\n        /// <param name=\"text\">The text.</param>\r\n        /// <param name=\"pattern\">The pattern.</param>\r\n        /// <returns></returns>\r\n        [SqlFunction]\r\n        public static bool Match(string text, string pattern)\r\n        {\r\n            //@\"^[0-9]{10}$\"\r\n            Regex regex = new Regex(pattern, RegexOptions.None);\r\n            return regex.IsMatch(text);\r\n        }\r\n    }\r\n}\r--danach Assembly regestrieren\r\nCREATE ASSEMBLY \r\n--assembly name for references from SQL script\r\nClassSqlRegEx \r\n-- assembly name and full path to assembly dll\r\nfrom 'G:\\VS2010\\SqlServerRegex\\SqlServerRegex\\bin\\Debug\\SqlServerRegex.dll' \r\nWITH PERMISSION_SET = SAFE\r\r--sp_configure 'clr enabled', 1\r\nGO\r\nRECONFIGURE\r\nGO\r\nALTER DATABASE AdventureWorks2012 SET TRUSTWORTHY ON;.",
      "sub_sub": 36,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 97,
      "titel": "Stream From/To File",
      "text": "//Serialisierbare Objekte From File\r\nMemoryStream ms = new MemoryStream(b);\r\n                        BinaryFormatter bf = new BinaryFormatter();\r\n                        ms.Position = 0;\r\n                        return bf.Deserialize(ms);\r\n                        \r\n//Serialisierbare Objekte To File\r\nMemoryStream r = new MemoryStream();\r\n                        System.Runtime.Serialization.Formatters.Binary.BinaryFormatter bf = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();\r\n                        bf.Serialize(r, mi);\r\n                        using (var fileStream = new FileStream(path, FileMode.Create, FileAccess.Write))\r\n                        {\r\n                            r.CopyTo(fileStream);\r\n                        }",
      "sub_sub": 53,
      "sub": 1,
      "lang": 1,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 8,
      "titel": "Streamreader / writer",
      "text": "string line;\r\nusing (StreamReader reader = new StreamReader(\"file.txt\"))\r\n{\t\r\n\twhile ((line = reader.ReadLine()) != null)\r\n        { \r\n        \tcmbUrl.Items.Add(line);\r\n        }\r\n}\r\n\r\nConsole.WriteLine(line);\rusing (StreamWriter writer = new StreamWriter(\"important.txt\"))\r\n{\r\n\twriter.Write(\"Word \");\r\n\twriter.WriteLine(\"word 2\");\r\n\twriter.WriteLine(\"Line\");\r\n}",
      "sub_sub": 6,
      "sub": 1,
      "lang": 1,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 99,
      "titel": "Temporary Table",
      "text": "declare @tbl table(id int, Counties varchar(max),processed bit)\r\ninsert @tbl2 select idx,value,0 from fn_Split(@county,',')\r\nselect * from @tbl \r\n",
      "sub_sub": 55,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 29,
      "titel": "Verwaltung",
      "text": "--Liefert aktive SQL Server Verbindungen exec dbo.sp_who\r\nexec dbo.sp_who2\r--liefert Datenbank Dateien Pfad mdf ldf\r\nuse fitnessSql\r\ngo\r\nexec dbo.sp_helpfile\r--liefert Regestry Einträge\r\ndeclare @dir nvarchar(4000)\r\nexec master.dbo.xp_instance_regread\r\n    N'HKEY_LOCAL_MACHINE',\r\n    N'Software\\Microsoft\\MSSQLServer\\Setup',\r\n    N'SQLPath', \r\n    @dir output\r\nselect @dir\r--liefert physical_name aller Datenbanken\r\nselect * from sys.master_files\r\n--liefert physical_device_name\r\nselect * from msdb.dbo.backupmediafamily\r\n--liefert Infos über Backupdateien\r\nselect * from msdb.dbo.backupset\r\n--liefert Infos einer bestimmten Tabelle\r\nselect top 1 m.physical_device_name, s.backup_finish_date from msdb.dbo.backupset s\r\ninner join msdb.dbo.backupmediafamily m ON s.media_set_id = m.media_set_id where database_name = 'lizenz'\r\norder by s.backup_finish_date desc",
      "sub_sub": 15,
      "sub": 2,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 84,
      "titel": "Wartungsplan aktivieren",
      "text": "sp_configure 'show advanced options', 1;\r\nGO\r\nRECONFIGURE;\r\nGO\r\nsp_configure 'Agent XPs', 1;\r\nGO\r\nRECONFIGURE\r\nGO",
      "sub_sub": 41,
      "sub": 2,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 69,
      "titel": "where in",
      "text": "SELECT *  FROM CUSTOMERS  WHERE ID IN (SELECT ID   FROM CUSTOMERS  WHERE SALARY > 4500) ;",
      "sub_sub": 32,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    },
    {
      "id": 71,
      "titel": "Zahlen abrunden",
      "text": "--ROUND ( numeric_expression , length [ ,function ] )\r\n --function Die Art der auszuführenden Operation. function muss vom Datentyp tinyint, smallint oder int sein. \r\n --Wenn function ausgelassen wird oder den Wert 0 hat (Standardeinstellung), wird numeric_expression gerundet. \r\n --Wird nicht der Wert 0 angegeben, wird numeric_expression abgeschnitten.\r\nselect Round('12.45678', 3) --== 12.45700\r\nselect Round('12.45678' ,2) --== 12.46000\r\nselect Round('12.45678', 1) --== 12.50000\r\nselect Round('12.45678', 0) --== 12.00000\r\nselect Round('12.45678', -1) --== 10.00000\r\nselect Round('12.45678', -2) --== 0",
      "sub_sub": 34,
      "sub": 12,
      "lang": 4,
      "sort": 0,
      "datum": "2020-04-08 07:21:47.933",
      "edit": "2020-04-08 07:21:47.933"
    }
  ],
  "f_thema": []
}